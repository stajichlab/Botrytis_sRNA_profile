#!/usr/bin/env python3
import csv, os, sys, re
import io
import gzip
import argparse
import pysam

from pybedtools import BedTool
import tempfile
parser = argparse.ArgumentParser(
    description='Subtract Tomato perfect matches from Bc perfect matches')

parser.add_argument('-o', '--outdir', default='results',help="output folder for results")
parser.add_argument('-b', '--botrytis', default="results/Botrytis_matchAligned.out.reads.tsv.gz",
                  help='Botrytis mapping reads in TSV format, separated by library - generated by get_BAM_sRNA_unique.py')

parser.add_argument('-t', '--tomato', default="results/Tomato_matchAligned.out.reads.tsv.gz",
                  help='Tomato mapping reads in TSV format, separated by library - generated by get_BAM_sRNA_unique.py')


parser.add_argument('-s', '--skipsingle', action=argparse.BooleanOptionalAction,default=True,
                  help='Skip single count reads')

parser.add_argument('-f', '--featurefile', default="genomes/botrytis/BcinereaB05-10.features.sort.gff3.gz",
                  help='gene and TEfile for read overlap classification')

args = parser.parse_args()

outsave = os.path.join(args.outdir,"{}.tomato_subtract.tsv.gz".format("Botrytis"))
outsavebed = os.path.join(args.outdir,"{}.tomato_subtract.bed".format("Botrytis"))

with gzip.open(args.botrytis, "r") as bc,  gzip.open(args.tomato, "r") as sl, gzip.open(outsave,'w') as outB, open(outsavebed,'w') as outBed:
    slreader = csv.reader(io.TextIOWrapper(sl, newline=""),delimiter="\t")
    slheader = next(slreader)
    
    slhits = set()
    
    for row in slreader:
        name=row[3]
        if name in slhits:
            print("found a non-unique sRNA read {}".format(name))
        else:
            slhits.add(name)

    bcreader = csv.reader(io.TextIOWrapper(bc, newline=""),delimiter="\t")
    bcwriter = csv.writer(io.TextIOWrapper(outB,newline="", write_through=True),delimiter="\t")
    bcbed = csv.writer(outBed,delimiter="\t")

    bcheader = next(bcreader)
    bcwriter.writerow(bcheader)
    
    id2size = {}
    for row in bcreader:
        name = row[3]
        if args.skipsingle and int(row[6]) <= 1:
            continue
        if name not in slhits:
            bcwriter.writerow(row)
            id2size[row[3]] = { 'length': int(row[4]),  # this LENGTH col
                                'unique': int(row[5]),  # this is UNIQUE col
                                'count' : int(row[6]) } # this TOTAL_COUNT column
            bcbed.writerow([row[0], row[1], row[2], row[3]])

genomefeatures = BedTool(args.featurefile)
sRNA           = BedTool(outsavebed)

# this would only be reads that overlap we need to also consider those which do not overlap
readsInFeatures = sRNA.intersect(genomefeatures,wo=True)
sizeprofile = {}
sizeprofileuniq = {}
types = set()
for i in readsInFeatures:
    seq  = i[3]
    type = i[6]

    len    = id2size[seq]['length']
    unique = id2size[seq]['unique']
    ct     = id2size[seq]['count']
    if type == "exon" or type == "tRNA":
        types.add(type)
        if len not in sizeprofile:
            sizeprofile[len] = {type: ct}
        elif type not in sizeprofile[len]:
            sizeprofile[len][type] = ct
        else:
            sizeprofile[len][type] += ct
        if unique == 1:
            if len not in sizeprofileuniq:
                sizeprofileuniq[len] = {type: ct}
            elif type not in sizeprofile[len]:
                sizeprofileuniq[len][type] = ct
            else:
                sizeprofileuniq[len][type] += ct
    elif type == 'match': # this is how we coded RepeatMasker results
        grpcol  = i[12]
        grp = {}
        for nm in grpcol.split(";"):
            (key,val) = nm.split("=")
            v = val.split('/')[0]
            grp[key] = "TE.{}".format(v)
        types.add(grp['type'])
        if len not in sizeprofile:
            sizeprofile[len] = {grp["type"]: ct}
        elif grp["type"] not in sizeprofile[len]:
            sizeprofile[len][ grp["type"] ]= ct
        else:
            sizeprofile[len][ grp["type"] ]+= ct

        # keep track of unique matchers too
        if unique == 1:
            if len not in sizeprofileuniq:
                sizeprofileuniq[len] = {grp["type"]: ct}
            elif grp["type"] not in sizeprofileuniq[len]:
                sizeprofileuniq[len][ grp["type"] ]= ct
            else:
                sizeprofileuniq[len][ grp["type"] ] += ct
ctheader = ['SIZE']
ctheader.extend(sorted(list(types)))
ctheader.append("TOTAL")
with open(os.path.join(args.outdir,"Botrytis_size_profile.tsv"),"w") as ofh:
    bcwriter = csv.writer(ofh,delimiter="\t")
   
    bcwriter.writerow(ctheader)

    for size in sorted(sizeprofile):
        row = [size]
        sum = 0
        for type in sorted(types):
            ct = 0
            if type in sizeprofile[size]:
                ct = sizeprofile[size][type]
            row.append(ct)
            sum += ct
        row.append(sum)    
        bcwriter.writerow(row)


with open(os.path.join(args.outdir,"Botrytis_size_profile_uniq.tsv"),"w") as ofh:
    bcwriter = csv.writer(ofh,delimiter="\t")
    bcwriter.writerow(ctheader)

    for size in sorted(sizeprofileuniq):
        row = [size]
        sum = 0
        for type in sorted(types):
            ct = 0
            if type in sizeprofileuniq[size]:
                ct = sizeprofileuniq[size][type]
            row.append(ct)
            sum += ct
        row.append(sum)
        bcwriter.writerow(row)
    
